// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  user
  admin
  super_admin
}

model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(40)
  email     String   @unique
  password  String
  role      UserRole @default(user)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip         Trip[]
  buddyRequest BuddyRequest[]
  profile      Profile?
}

model Trip {
  id          String  @id @default(uuid())
  title       String
  destination String
  startDate   String
  endDate     String
  description String
  photo       String?
  budget      Int

  userId       String
  user         User           @relation(fields: [userId], references: [id])
  buddyRequest BuddyRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BuddyRequest {
  id        String        @id @default(uuid())
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  trips  Trip   @relation(fields: [tripId], references: [id])
  tripId String
  userId String
}

model Profile {
  id        String   @id @default(uuid())
  bio       String
  country   String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
